
import { supabase } from '@/integrations/supabase/client';
import { SocialAttendance, AttendanceType } from '@/types/assistance';

export async function fetchAttendances(centerId?: string): Promise<SocialAttendance[]> {
  let query = supabase
    .from('social_attendances')
    .select('*')
    .order('created_at', { ascending: false });

  if (centerId) {
    query = query.eq('center_id', centerId);
  }

  const { data, error } = await query;

  if (error) {
    console.error('Error fetching social attendances:', error);
    throw error;
  }

  return data || [];
}

export async function fetchAttendanceById(id: string): Promise<SocialAttendance | null> {
  const { data, error } = await supabase
    .from('social_attendances')
    .select(`
      *,
      attachments:attendance_attachments(*)
    `)
    .eq('id', id)
    .single();

  if (error) {
    console.error('Error fetching social attendance:', error);
    throw error;
  }

  return data;
}

export async function createAttendance(attendance: Partial<SocialAttendance>): Promise<SocialAttendance> {
  // Validate required fields
  if (!attendance.attendance_type) {
    throw new Error('Attendance type is required');
  }
  if (!attendance.description) {
    throw new Error('Description is required');
  }
  
  // Validate attendance_type is one of the allowed values
  const validAttendanceTypes: AttendanceType[] = [
    'reception', 'qualified_listening', 'referral', 'guidance', 'follow_up', 'other'
  ];
  
  if (!validAttendanceTypes.includes(attendance.attendance_type)) {
    throw new Error('Invalid attendance type');
  }

  // Create a safe attendance object
  // Note: protocol_number is generated by the DB via trigger
  const safeAttendance = {
    citizen_id: attendance.citizen_id,
    citizen_name: attendance.citizen_name,
    professional_id: attendance.professional_id,
    professional_name: attendance.professional_name,
    center_id: attendance.center_id,
    center_name: attendance.center_name,
    attendance_type: attendance.attendance_type,
    attendance_date: attendance.attendance_date,
    description: attendance.description,
    referrals: attendance.referrals,
    follow_up_required: attendance.follow_up_required,
    follow_up_date: attendance.follow_up_date
  };

  const { data, error } = await supabase
    .from('social_attendances')
    .insert(safeAttendance)
    .select()
    .single();

  if (error) {
    console.error('Error creating social attendance:', error);
    throw error;
  }

  return data;
}

export async function updateAttendance(id: string, attendance: Partial<SocialAttendance>): Promise<SocialAttendance> {
  // Validate attendance_type if provided
  if (attendance.attendance_type) {
    const validAttendanceTypes: AttendanceType[] = [
      'reception', 'qualified_listening', 'referral', 'guidance', 'follow_up', 'other'
    ];
    
    if (!validAttendanceTypes.includes(attendance.attendance_type)) {
      throw new Error('Invalid attendance type');
    }
  }
  
  // Create safe update object
  const safeUpdate: Record<string, any> = {};
  
  // Only include defined fields that we want to update
  if (attendance.citizen_id !== undefined) safeUpdate.citizen_id = attendance.citizen_id;
  if (attendance.citizen_name !== undefined) safeUpdate.citizen_name = attendance.citizen_name;
  if (attendance.professional_id !== undefined) safeUpdate.professional_id = attendance.professional_id;
  if (attendance.professional_name !== undefined) safeUpdate.professional_name = attendance.professional_name;
  if (attendance.center_id !== undefined) safeUpdate.center_id = attendance.center_id;
  if (attendance.center_name !== undefined) safeUpdate.center_name = attendance.center_name;
  if (attendance.attendance_type !== undefined) safeUpdate.attendance_type = attendance.attendance_type;
  if (attendance.attendance_date !== undefined) safeUpdate.attendance_date = attendance.attendance_date;
  if (attendance.description !== undefined) safeUpdate.description = attendance.description;
  if (attendance.referrals !== undefined) safeUpdate.referrals = attendance.referrals;
  if (attendance.follow_up_required !== undefined) safeUpdate.follow_up_required = attendance.follow_up_required;
  if (attendance.follow_up_date !== undefined) safeUpdate.follow_up_date = attendance.follow_up_date;
  
  const { data, error } = await supabase
    .from('social_attendances')
    .update(safeUpdate)
    .eq('id', id)
    .select()
    .single();

  if (error) {
    console.error('Error updating social attendance:', error);
    throw error;
  }

  return data;
}
