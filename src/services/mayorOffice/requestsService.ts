
import { supabase } from "@/integrations/supabase/client";
import { DirectRequest, PriorityLevel, RequestStatus } from "@/types/mayorOffice";
import { toast } from "@/hooks/use-toast";
import { format } from "date-fns";

// Direct Requests
export async function getDirectRequests(status?: RequestStatus): Promise<DirectRequest[]> {
  try {
    let query = supabase
      .from("mayor_direct_requests")
      .select(
        `*, 
        mayor_request_attachments(*), 
        mayor_request_comments(*)`
      )
      .order("created_at", { ascending: false });

    if (status) {
      query = query.eq("status", status);
    }

    const { data, error } = await query;

    if (error) throw error;

    return (data || []).map((request) => ({
      id: request.id,
      protocolNumber: request.protocol_number,
      title: request.title,
      description: request.description,
      requesterId: request.requester_id,
      requesterName: request.requester_name,
      targetDepartment: request.target_department,
      priority: request.priority as PriorityLevel,
      status: request.status as RequestStatus,
      dueDate: request.due_date ? new Date(request.due_date) : undefined,
      completedAt: request.completed_at ? new Date(request.completed_at) : undefined,
      createdAt: new Date(request.created_at),
      updatedAt: new Date(request.updated_at),
      attachments: request.mayor_request_attachments?.map((attachment: any) => ({
        id: attachment.id,
        requestId: attachment.request_id,
        fileName: attachment.file_name,
        filePath: attachment.file_path,
        fileType: attachment.file_type,
        fileSize: attachment.file_size,
        uploadedBy: attachment.uploaded_by,
        createdAt: new Date(attachment.created_at),
      })) || [],
      comments: request.mayor_request_comments?.map((comment: any) => ({
        id: comment.id,
        requestId: comment.request_id,
        commentText: comment.comment_text,
        authorId: comment.author_id,
        authorName: comment.author_name,
        createdAt: new Date(comment.created_at),
      })) || [],
    }));
  } catch (error: any) {
    console.error("Error fetching direct requests:", error.message);
    toast({
      title: "Erro ao carregar solicitações diretas",
      description: error.message,
      variant: "destructive",
    });
    return [];
  }
}

// Create Direct Request
export async function createDirectRequest(requestData: {
  title: string;
  description: string;
  requester_id: string;
  target_department: string;
  priority: PriorityLevel;
  status: RequestStatus;
  due_date: string;
}): Promise<DirectRequest | null> {
  try {
    // Note: protocol_number is generated by a database trigger
    const { data, error } = await supabase
      .from("mayor_direct_requests")
      .insert({
        title: requestData.title,
        description: requestData.description,
        requester_id: requestData.requester_id,
        target_department: requestData.target_department,
        priority: requestData.priority,
        status: requestData.status,
        due_date: requestData.due_date,
      })
      .select()
      .single();

    if (error) throw error;

    return {
      id: data.id,
      protocolNumber: data.protocol_number,
      title: data.title,
      description: data.description,
      requesterId: data.requester_id,
      requesterName: data.requester_name,
      targetDepartment: data.target_department,
      priority: data.priority as PriorityLevel,
      status: data.status as RequestStatus,
      dueDate: data.due_date ? new Date(data.due_date) : undefined,
      completedAt: data.completed_at ? new Date(data.completed_at) : undefined,
      createdAt: new Date(data.created_at),
      updatedAt: new Date(data.updated_at),
      attachments: [],
      comments: [],
    };
  } catch (error: any) {
    console.error("Error creating direct request:", error.message);
    toast({
      title: "Erro ao criar solicitação direta",
      description: error.message,
      variant: "destructive",
    });
    return null;
  }
}
