
import { supabase } from "@/integrations/supabase/client";
import { toast } from "@/hooks/use-toast";

export interface CitizenRequest {
  id: string;
  protocol_number: string;
  title: string;
  description: string;
  target_department: string;
  priority: string;
  status: string;
  due_date?: string;
  created_at: string;
  updated_at: string;
}

export interface NewRequestData {
  title: string;
  description: string;
  target_department: string;
  priority: string;
}

// Fetch all requests for a citizen
export async function getCitizenRequests(citizenId: string | undefined): Promise<CitizenRequest[]> {
  if (!citizenId) {
    return [];
  }

  try {
    // Get requests from mayor_direct_requests table
    const { data: requests, error } = await supabase
      .from("mayor_direct_requests")
      .select("*")
      .eq("requester_id", citizenId)
      .order("created_at", { ascending: false });

    if (error) throw error;

    return requests.map(request => ({
      id: request.id,
      protocol_number: request.protocol_number,
      title: request.title,
      description: request.description,
      target_department: request.target_department,
      priority: request.priority,
      status: request.status,
      due_date: request.due_date,
      created_at: request.created_at,
      updated_at: request.updated_at
    }));
  } catch (error: any) {
    console.error("Error fetching citizen requests:", error.message);
    throw error;
  }
}

// Fetch a specific request by ID
export async function getCitizenRequestById(requestId: string, citizenId: string | undefined): Promise<CitizenRequest | null> {
  if (!citizenId) {
    return null;
  }

  try {
    const { data, error } = await supabase
      .from("mayor_direct_requests")
      .select(`
        *,
        mayor_request_attachments(*),
        mayor_request_comments(*)
      `)
      .eq("id", requestId)
      .eq("requester_id", citizenId)
      .single();

    if (error) throw error;
    
    return {
      id: data.id,
      protocol_number: data.protocol_number,
      title: data.title,
      description: data.description,
      target_department: data.target_department,
      priority: data.priority,
      status: data.status,
      due_date: data.due_date,
      created_at: data.created_at,
      updated_at: data.updated_at,
      // Include additional properties for attachments and comments
      attachments: data.mayor_request_attachments || [],
      comments: data.mayor_request_comments || []
    };
  } catch (error: any) {
    console.error("Error fetching request details:", error.message);
    return null;
  }
}

// Create a new citizen request
export async function createCitizenRequest(data: NewRequestData, citizenId: string | undefined): Promise<CitizenRequest | null> {
  if (!citizenId) {
    toast({
      title: "Erro ao criar solicitação",
      description: "Usuário não identificado. Por favor, faça login novamente.",
      variant: "destructive",
    });
    return null;
  }

  try {
    const { data: requestData, error } = await supabase
      .from("mayor_direct_requests")
      .insert({
        title: data.title,
        description: data.description,
        target_department: data.target_department,
        priority: data.priority || "normal",
        status: "open",
        requester_id: citizenId,
        protocol_number: '' // This will be auto-generated by the DB trigger
      })
      .select()
      .single();

    if (error) throw error;

    toast({
      title: "Solicitação criada",
      description: `Protocolo ${requestData.protocol_number} registrado com sucesso.`,
    });

    return {
      id: requestData.id,
      protocol_number: requestData.protocol_number,
      title: requestData.title,
      description: requestData.description,
      target_department: requestData.target_department,
      priority: requestData.priority,
      status: requestData.status,
      created_at: requestData.created_at,
      updated_at: requestData.updated_at
    };
  } catch (error: any) {
    console.error("Error creating citizen request:", error.message);
    toast({
      title: "Erro ao criar solicitação",
      description: error.message || "Ocorreu um erro ao registrar sua solicitação.",
      variant: "destructive",
    });
    return null;
  }
}

// Add a comment to a request
export async function addCommentToRequest(requestId: string, commentText: string, authorId: string | undefined): Promise<boolean> {
  if (!authorId) return false;
  
  try {
    const { error } = await supabase
      .from("mayor_request_comments")
      .insert({
        request_id: requestId,
        comment_text: commentText,
        author_id: authorId
      });
      
    if (error) throw error;
    
    return true;
  } catch (error: any) {
    console.error("Error adding comment:", error.message);
    return false;
  }
}
