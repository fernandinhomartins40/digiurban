import { supabase } from "@/integrations/supabase/client";
import { HRRequest, HRRequestType, HRRequestStatus, HRRequestAttachment, HRStatusHistory } from "@/types/administration";
import { toast } from "@/hooks/use-toast";

// Fetch request types
export async function fetchRequestTypes(): Promise<HRRequestType[]> {
  try {
    const { data, error } = await supabase
      .from("hr_request_types")
      .select("*")
      .order("name");

    if (error) throw error;

    return (data || []).map((type) => ({
      id: type.id,
      name: type.name,
      description: type.description,
      formSchema: type.form_schema as { fields: { name: string; type: string; label: string; required: boolean; }[] },
      createdAt: new Date(type.created_at),
      updatedAt: new Date(type.updated_at),
    }));
  } catch (error: any) {
    console.error("Error fetching request types:", error.message);
    toast({
      title: "Erro ao carregar tipos de solicitação",
      description: error.message,
      variant: "destructive",
    });
    return [];
  }
}

// Create a new request
export async function createRequest(
  userId: string,
  requestTypeId: string,
  formData: Record<string, any>
): Promise<HRRequest | null> {
  try {
    // We don't need to provide protocol_number as it's generated by a trigger in the database
    const { data, error } = await supabase
      .from("hr_requests")
      .insert({
        user_id: userId,
        request_type_id: requestTypeId,
        form_data: formData,
        protocol_number: '' // We provide an empty string because it's required by TypeScript but will be overwritten by the DB trigger
      })
      .select("*, request_type:request_type_id(*)")
      .single();

    if (error) throw error;

    // Add entry to status history
    await addStatusHistory(
      data.id,
      'pending',
      'Solicitação criada',
      userId
    );

    return mapRequestFromDb(data);
  } catch (error: any) {
    console.error("Error creating request:", error.message);
    toast({
      title: "Erro ao criar solicitação",
      description: error.message,
      variant: "destructive",
    });
    return null;
  }
}

// Upload attachment for request
export async function uploadRequestAttachment(
  userId: string,
  requestId: string,
  file: File
): Promise<HRRequestAttachment | null> {
  try {
    const filePath = `${userId}/${requestId}/${new Date().getTime()}-${file.name}`;
    
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from("hr_documents")
      .upload(filePath, file);

    if (uploadError) throw uploadError;

    const { data, error } = await supabase
      .from("hr_request_attachments")
      .insert({
        request_id: requestId,
        file_path: uploadData.path,
        file_name: file.name,
        file_type: file.type,
        file_size: file.size,
      })
      .select()
      .single();

    if (error) throw error;

    return {
      id: data.id,
      requestId: data.request_id,
      filePath: data.file_path,
      fileName: data.file_name,
      fileType: data.file_type,
      fileSize: data.file_size,
      createdAt: new Date(data.created_at),
    };
  } catch (error: any) {
    console.error("Error uploading attachment:", error.message);
    toast({
      title: "Erro ao fazer upload do anexo",
      description: error.message,
      variant: "destructive",
    });
    return null;
  }
}

// Fetch request attachments
export async function fetchRequestAttachments(requestId: string): Promise<HRRequestAttachment[]> {
  try {
    const { data, error } = await supabase
      .from("hr_request_attachments")
      .select("*")
      .eq("request_id", requestId)
      .order("created_at", { ascending: false });

    if (error) throw error;

    return (data || []).map((attachment) => ({
      id: attachment.id,
      requestId: attachment.request_id,
      filePath: attachment.file_path,
      fileName: attachment.file_name,
      fileType: attachment.file_type,
      fileSize: attachment.file_size,
      createdAt: new Date(attachment.created_at),
    }));
  } catch (error: any) {
    console.error("Error fetching request attachments:", error.message);
    toast({
      title: "Erro ao carregar anexos",
      description: error.message,
      variant: "destructive",
    });
    return [];
  }
}

// Fetch requests for a user
export async function fetchUserRequests(userId: string): Promise<HRRequest[]> {
  try {
    const { data, error } = await supabase
      .from("hr_requests")
      .select("*, request_type:request_type_id(*)")
      .eq("user_id", userId)
      .order("created_at", { ascending: false });

    if (error) throw error;

    return (data || []).map(mapRequestFromDb);
  } catch (error: any) {
    console.error("Error fetching user requests:", error.message);
    toast({
      title: "Erro ao carregar solicitações",
      description: error.message,
      variant: "destructive",
    });
    return [];
  }
}

// Fetch all requests (admin function)
export async function fetchAllRequests(
  status?: HRRequestStatus,
  requestTypeId?: string
): Promise<HRRequest[]> {
  try {
    let query = supabase
      .from("hr_requests")
      .select("*, request_type:request_type_id(*)")
      .order("created_at", { ascending: false });

    if (status) {
      query = query.eq("status", status);
    }

    if (requestTypeId) {
      query = query.eq("request_type_id", requestTypeId);
    }

    const { data, error } = await query;

    if (error) throw error;

    return (data || []).map(mapRequestFromDb);
  } catch (error: any) {
    console.error("Error fetching all requests:", error.message);
    toast({
      title: "Erro ao carregar solicitações",
      description: error.message,
      variant: "destructive",
    });
    return [];
  }
}

// Update request status
export async function updateRequestStatus(
  requestId: string,
  status: HRRequestStatus,
  comments: string | null,
  userId: string,
  assignedTo?: string
): Promise<HRRequest | null> {
  try {
    let updateData: Record<string, any> = { status };
    if (assignedTo) {
      updateData.assigned_to = assignedTo;
    }

    const { data, error } = await supabase
      .from("hr_requests")
      .update(updateData)
      .eq("id", requestId)
      .select("*, request_type:request_type_id(*)")
      .single();

    if (error) throw error;

    // Add entry to status history
    await addStatusHistory(
      requestId,
      status,
      comments || `Status atualizado para ${status}`,
      userId
    );

    toast({
      title: "Status atualizado",
      description: `Solicitação atualizada para ${status}.`,
    });

    return mapRequestFromDb(data);
  } catch (error: any) {
    console.error("Error updating request status:", error.message);
    toast({
      title: "Erro ao atualizar status",
      description: error.message,
      variant: "destructive",
    });
    return null;
  }
}

// Add entry to status history
export async function addStatusHistory(
  requestId: string,
  status: HRRequestStatus,
  comments: string | null,
  userId: string
): Promise<HRStatusHistory | null> {
  try {
    const { data, error } = await supabase
      .from("hr_request_status_history")
      .insert({
        request_id: requestId,
        status,
        comments,
        changed_by: userId,
      })
      .select()
      .single();

    if (error) throw error;

    return {
      id: data.id,
      requestId: data.request_id,
      status: data.status,
      comments: data.comments,
      changedBy: data.changed_by,
      createdAt: new Date(data.created_at),
    };
  } catch (error: any) {
    console.error("Error adding status history:", error.message);
    return null;
  }
}

// Fetch request status history
export async function fetchRequestHistory(requestId: string): Promise<HRStatusHistory[]> {
  try {
    const { data, error } = await supabase
      .from("hr_request_status_history")
      .select("*")
      .eq("request_id", requestId)
      .order("created_at", { ascending: false });

    if (error) throw error;

    return (data || []).map((history) => ({
      id: history.id,
      requestId: history.request_id,
      status: history.status,
      comments: history.comments,
      changedBy: history.changed_by,
      createdAt: new Date(history.created_at),
    }));
  } catch (error: any) {
    console.error("Error fetching request history:", error.message);
    toast({
      title: "Erro ao carregar histórico",
      description: error.message,
      variant: "destructive",
    });
    return [];
  }
}

// Helper function to map request data from database
function mapRequestFromDb(request: any): HRRequest {
  return {
    id: request.id,
    protocolNumber: request.protocol_number,
    userId: request.user_id,
    requestTypeId: request.request_type_id,
    requestType: request.request_type ? {
      id: request.request_type.id,
      name: request.request_type.name,
      description: request.request_type.description,
      formSchema: request.request_type.form_schema,
      createdAt: new Date(request.request_type.created_at),
      updatedAt: new Date(request.request_type.updated_at),
    } : undefined,
    formData: request.form_data,
    status: request.status,
    assignedTo: request.assigned_to,
    createdAt: new Date(request.created_at),
    updatedAt: new Date(request.updated_at),
  };
}
